// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aKgx23trR4pRruD8EJjwJD
// Component: qsQtiH-HkAmz0
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Header from "../../Header" // plasmic-import: _A530sb_4cqLg/component
import TopSection from "../../TopSection" // plasmic-import: 5SUma1BVAohQJ/component
import Section from "../../Section" // plasmic-import: QcZGccdaY1-VP/component
import FeatureCard from "../../FeatureCard" // plasmic-import: nc6ccUG19VKId/component
import Testimonial from "../../Testimonial" // plasmic-import: LHmILgEdBtetSN/component
import HomeCta from "../../HomeCta" // plasmic-import: ru8gTUrsyIQDE/component
import Footer from "../../Footer" // plasmic-import: XHaa485UFVs2w/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: I1cB24cfWiGpRn/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_simple_light_landing_page.module.css" // plasmic-import: aKgx23trR4pRruD8EJjwJD/projectcss
import * as sty from "./PlasmicHome.module.css" // plasmic-import: qsQtiH-HkAmz0/css

import LightningIcon from "./icons/PlasmicIcon__Lightning" // plasmic-import: 0T6yeoiNxWU7bC/icon
import HammerIcon from "./icons/PlasmicIcon__Hammer" // plasmic-import: 7LzMhDpREtTTVX/icon
import PencilIcon from "./icons/PlasmicIcon__Pencil" // plasmic-import: 8L9pOrF8oOymMc/icon
import SwapIcon from "./icons/PlasmicIcon__Swap" // plasmic-import: TPr3C9MtAgoHre/icon
import SlotIcon from "./icons/PlasmicIcon__Slot" // plasmic-import: H6zaqv0TuoWAWn/icon
import CycleIcon from "./icons/PlasmicIcon__Cycle" // plasmic-import: Ke4bFUPK43YJbL/icon
import FacebookLogoIcon from "./icons/PlasmicIcon__FacebookLogo" // plasmic-import: C87rxJYj0vfZI1/icon
import TinderLogoIcon from "./icons/PlasmicIcon__TinderLogo" // plasmic-import: sOiwcx4N79fQPF/icon
import AirbnbLogoIcon from "./icons/PlasmicIcon__AirbnbLogo" // plasmic-import: 2dioccwpGrV7RF/icon
import HubspotLogoIcon from "./icons/PlasmicIcon__HubspotLogo" // plasmic-import: OwSF-6xb8mAzG1/icon
import AmazonLogoIcon from "./icons/PlasmicIcon__AmazonLogo" // plasmic-import: S6eAROBy2RkiGA/icon
import simpleProjectWvhMMwMMyHHcy2 from "./images/simpleProject.png" // plasmic-import: wvhMMwMMyHHcy2/picture
import taskGg9JjwruHl9Ye from "./images/task.png" // plasmic-import: GG9Jjwru_HL9Ye/picture

export type PlasmicHome__VariantMembers = {}

export type PlasmicHome__VariantsArgs = {}
type VariantPropType = keyof PlasmicHome__VariantsArgs
export const PlasmicHome__VariantProps = new Array<VariantPropType>()

export type PlasmicHome__ArgsType = {}
type ArgPropType = keyof PlasmicHome__ArgsType
export const PlasmicHome__ArgProps = new Array<ArgPropType>()

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">
  header?: p.Flex<typeof Header>
  topSection?: p.Flex<typeof TopSection>
  testimonial?: p.Flex<typeof Testimonial>
  homeCta?: p.Flex<typeof HomeCta>
  footer?: p.Flex<typeof Footer>
}

export interface DefaultHomeProps {
  className?: string
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs
  args: PlasmicHome__ArgsType
  overrides: PlasmicHome__OverridesType
  dataFetches?: PlasmicHome__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__iBkD2)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <TopSection
              data-plasmic-name={"topSection"}
              data-plasmic-override={overrides.topSection}
              className={classNames("__wab_instance", sty.topSection)}
            />

            <Section
              className={classNames("__wab_instance", sty.section__dbDlk)}
              subtitle={
                "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
              }
              title={"Explore the solutions"}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__qP7XU)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box___3TMhG)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__h54S
                  )}
                >
                  {"Powerful suite of tools"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__q6J7Q
                  )}
                >
                  {
                    "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa."
                  }
                </div>

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__veCx
                  )}
                  description={
                    "Taking collaboration to the next level with security and administrative features built for teams"
                  }
                  iconBack={
                    <LightningIcon
                      className={classNames(defaultcss.all, sty.svg__isXqC)}
                      role={"img"}
                    />
                  }
                  long={"long" as const}
                  title={"Building the Simple ecosystem"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__rdjsy
                  )}
                  description={
                    "Taking collaboration to the next level with security and administrative features built for teams"
                  }
                  iconBack={
                    <HammerIcon
                      className={classNames(defaultcss.all, sty.svg__boq8E)}
                      role={"img"}
                    />
                  }
                  long={"long" as const}
                  title={"Building the Simple Ecosystem"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__bkqzs
                  )}
                  description={
                    "Taking collaboration to the next level with security and administrative features built for teams"
                  }
                  iconBack={
                    <PencilIcon
                      className={classNames(defaultcss.all, sty.svg__uvFp6)}
                      role={"img"}
                    />
                  }
                  long={"long" as const}
                  title={"Building the Simple Ecosystem"}
                />
              </p.Stack>

              <div className={classNames(defaultcss.all, sty.box__bIhKz)}>
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img___33Mt)}
                  role={"img"}
                  src={simpleProjectWvhMMwMMyHHcy2}
                />

                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__jTm5U)}
                  role={"img"}
                  src={taskGg9JjwruHl9Ye}
                />
              </div>
            </p.Stack>

            <div className={classNames(defaultcss.all, sty.box__pXyon)}>
              <div className={classNames(defaultcss.all, sty.box__xi2Lp)} />

              <Section
                className={classNames("__wab_instance", sty.section__fTpNb)}
                subtitle={
                  "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
                }
                title={"How Simple works"}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__toOo)}
              >
                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__oBnn5
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <SwapIcon
                      className={classNames(defaultcss.all, sty.svg__zdLwi)}
                      role={"img"}
                    />
                  }
                  title={"Initial Contact"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__lxSi3
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <SlotIcon
                      className={classNames(defaultcss.all, sty.svg__xj85E)}
                      role={"img"}
                    />
                  }
                  title={"Discovery Session"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__jl9Q5
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <CycleIcon
                      className={classNames(defaultcss.all, sty.svg__zmHb8)}
                      role={"img"}
                    />
                  }
                  title={"Contracting"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__hpDi4
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <HammerIcon
                      className={classNames(defaultcss.all, sty.svg__z5VP)}
                      role={"img"}
                    />
                  }
                  title={"Fast Prototyping"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__f6Vr2
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <PencilIcon
                      className={classNames(defaultcss.all, sty.svg__plH3E)}
                      role={"img"}
                    />
                  }
                  title={"Design Phase"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__hUeh5
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <LightningIcon
                      className={classNames(defaultcss.all, sty.svg__ivIzo)}
                      role={"img"}
                    />
                  }
                  title={"Develop & Launch"}
                />
              </p.Stack>

              <div className={classNames(defaultcss.all, sty.box__bNz02)} />
            </div>

            <Section
              className={classNames("__wab_instance", sty.section__oxPko)}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__qj0Ek)}
            >
              <FacebookLogoIcon
                className={classNames(defaultcss.all, sty.svg___4Pyug)}
                role={"img"}
              />

              <TinderLogoIcon
                className={classNames(defaultcss.all, sty.svg__ysNsl)}
                role={"img"}
              />

              <AirbnbLogoIcon
                className={classNames(defaultcss.all, sty.svg__jcLYx)}
                role={"img"}
              />

              <HubspotLogoIcon
                className={classNames(defaultcss.all, sty.svg__zIs6)}
                role={"img"}
              />

              <AmazonLogoIcon
                className={classNames(defaultcss.all, sty.svg__eOzeM)}
                role={"img"}
              />
            </p.Stack>

            <Testimonial
              data-plasmic-name={"testimonial"}
              data-plasmic-override={overrides.testimonial}
              className={classNames("__wab_instance", sty.testimonial)}
            />

            <HomeCta
              data-plasmic-name={"homeCta"}
              data-plasmic-override={overrides.homeCta}
              className={classNames("__wab_instance", sty.homeCta)}
            />

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "header", "topSection", "testimonial", "homeCta", "footer"],
  header: ["header"],
  topSection: ["topSection"],
  testimonial: ["testimonial"],
  homeCta: ["homeCta"],
  footer: ["footer"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  header: typeof Header
  topSection: typeof TopSection
  testimonial: typeof Testimonial
  homeCta: typeof HomeCta
  footer: typeof Footer
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHome__VariantsArgs
  args?: PlasmicHome__ArgsType
  overrides?: NodeOverridesType<T>
  dataFetches?: PlasmicHome__Fetches
} & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHome__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHome"
  } else {
    func.displayName = `PlasmicHome.${nodeName}`
  }
  return func
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    topSection: makeNodeComponent("topSection"),
    testimonial: makeNodeComponent("testimonial"),
    homeCta: makeNodeComponent("homeCta"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
  }
)

export default PlasmicHome
/* prettier-ignore-end */
