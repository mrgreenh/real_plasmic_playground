{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/icons/PlasmicIcon__Done24Pxsvg2.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicBullet.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicBullet.module.css","webpack://gatsby-starter-default/./src/components/Bullet.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicBaseCard.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicBaseCard.module.css","webpack://gatsby-starter-default/./src/components/BaseCard.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicPlan.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicPlan.module.css","webpack://gatsby-starter-default/./src/components/Plan.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicFaq.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicFaq.module.css","webpack://gatsby-starter-default/./src/components/Faq.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicPricing.module.css","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicPricing.tsx","webpack://gatsby-starter-default/./src/pages/pricing.tsx"],"names":["props","className","style","title","restProps","xmlns","viewBox","height","width","fill","classNames","d","PlasmicBullet__VariantProps","Array","PlasmicBullet__ArgProps","PlasmicDescendants","root","svg","makeNodeComponent","nodeName","func","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","dataFetches","as","data-plasmic-name","data-plasmic-override","data-plasmic-root","data-plasmic-for-node","hasGap","defaultcss","projectcss","role","p","defaultContents","value","children","PlasmicBullet__RenderFunc","displayName","PlasmicBullet","Object","assign","internalVariantProps","internalArgProps","Bullet_","ref","React","PlasmicBaseCard__VariantProps","PlasmicBaseCard__ArgProps","PlasmicBaseCard","hasVariant","iconBack","PlasmicBaseCard__RenderFunc","BaseCard_","PlasmicPlan__VariantProps","PlasmicPlan__ArgProps","PlasmicPlan","price","Bullet","description","LinkButton","text","type","PlasmicPlan__RenderFunc","PlasmicFaq__VariantProps","PlasmicFaq__ArgProps","PlasmicFaq","slot","PlasmicFaq__RenderFunc","box__lEtPl","header","section__thBzq","box__mg8V3","plan__k37CP","box__ovD04","plan__hsGe","box__bGy0G","box__rmob1","bullet__bLBgV","bullet__kC3Wy","bullet__p8UsS","bullet__cscSj","plan__uBazl","box__kmytQ","section___75JPl","faq__mzbhf","faq__yId7T","faq__eqGS","footer","PlasmicPricing__VariantProps","PlasmicPricing__ArgProps","ensureGlobalVariants","screen","useScreenVariants","sty","Header","Section","subtitle","Footer","PlasmicPricing__RenderFunc","PlasmicPricing"],"mappings":"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","file":"component---src-pages-pricing-tsx-21eda2ced149dbb107b6.js","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport type Done24Pxsvg2IconProps = React.ComponentProps<\"svg\"> & {\n  title?: string\n}\n\nexport function Done24Pxsvg2Icon(props: Done24Pxsvg2IconProps) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      viewBox={\"0 0 24 24\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path d={\"M0 0h24v24H0z\"} fill={\"none\"}></path>\n\n      <path d={\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\"}></path>\n    </svg>\n  )\n}\n\nexport default Done24Pxsvg2Icon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: aKgx23trR4pRruD8EJjwJD\n// Component: WBDhfq3Hb4FBSh\nimport * as React from \"react\"\n\nimport { Link, GatsbyLinkProps as LinkProps } from \"gatsby\"\n\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  wrapWithClassName,\n  createPlasmicElementProxy,\n  makeFragment,\n  MultiChoiceArg,\n  SingleBooleanChoiceArg,\n  SingleChoiceArg,\n  pick,\n  omit,\n  useTrigger,\n  StrictProps,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\n\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as defaultcss from \"../plasmic__default_style.module.css\" // plasmic-import: global/defaultcss\nimport * as projectcss from \"./plasmic_simple_light_landing_page.module.css\" // plasmic-import: aKgx23trR4pRruD8EJjwJD/projectcss\nimport * as sty from \"./PlasmicBullet.module.css\" // plasmic-import: WBDhfq3Hb4FBSh/css\n\nimport Done24Pxsvg2Icon from \"./icons/PlasmicIcon__Done24Pxsvg2\" // plasmic-import: tQfz97OjciV2ge/icon\n\nexport type PlasmicBullet__VariantMembers = {}\n\nexport type PlasmicBullet__VariantsArgs = {}\ntype VariantPropType = keyof PlasmicBullet__VariantsArgs\nexport const PlasmicBullet__VariantProps = new Array<VariantPropType>()\n\nexport type PlasmicBullet__ArgsType = {\n  children?: React.ReactNode\n}\n\ntype ArgPropType = keyof PlasmicBullet__ArgsType\nexport const PlasmicBullet__ArgProps = new Array<ArgPropType>(\"children\")\n\nexport type PlasmicBullet__OverridesType = {\n  root?: p.Flex<\"div\">\n  svg?: p.Flex<\"svg\">\n}\n\nexport interface DefaultBulletProps {\n  children?: React.ReactNode\n  className?: string\n}\n\nfunction PlasmicBullet__RenderFunc(props: {\n  variants: PlasmicBullet__VariantsArgs\n  args: PlasmicBullet__ArgsType\n  overrides: PlasmicBullet__OverridesType\n  dataFetches?: PlasmicBullet__Fetches\n  forNode?: string\n}) {\n  const { variants, args, overrides, forNode, dataFetches } = props\n\n  return (\n    <p.Stack\n      as={\"div\"}\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      hasGap={true}\n      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}\n    >\n      <Done24Pxsvg2Icon\n        data-plasmic-name={\"svg\"}\n        data-plasmic-override={overrides.svg}\n        className={classNames(defaultcss.all, sty.svg)}\n        role={\"img\"}\n      />\n\n      {p.renderPlasmicSlot({\n        defaultContents: \"Lorem ipsum dolor velit\",\n        value: args.children,\n      })}\n    </p.Stack>\n  ) as React.ReactElement | null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"svg\"],\n  svg: [\"svg\"],\n} as const\ntype NodeNameType = keyof typeof PlasmicDescendants\ntype DescendantsType<\n  T extends NodeNameType\n> = typeof PlasmicDescendants[T][number]\ntype NodeDefaultElementType = {\n  root: \"div\"\n  svg: \"svg\"\n}\n\ntype ReservedPropsType = \"variants\" | \"args\" | \"overrides\"\ntype NodeOverridesType<T extends NodeNameType> = Pick<\n  PlasmicBullet__OverridesType,\n  DescendantsType<T>\n>\ntype NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects\n  variants?: PlasmicBullet__VariantsArgs\n  args?: PlasmicBullet__ArgsType\n  overrides?: NodeOverridesType<T>\n  dataFetches?: PlasmicBullet__Fetches\n} & Omit<PlasmicBullet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props\n  // Specify args directly as props\n  Omit<PlasmicBullet__ArgsType, ReservedPropsType> &\n  // Specify overrides for each element directly as props\n  Omit<\n    NodeOverridesType<T>,\n    ReservedPropsType | VariantPropType | ArgPropType\n  > &\n  // Specify props for the root element\n  Omit<\n    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,\n    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>\n  >\n\nfunction makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {\n  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }\n  const func = function <T extends PropsType>(\n    props: T & StrictProps<T, PropsType>\n  ) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicBullet__ArgProps,\n      internalVariantPropNames: PlasmicBullet__VariantProps,\n    })\n\n    const { dataFetches } = props\n\n    return PlasmicBullet__RenderFunc({\n      variants,\n      args,\n      overrides,\n      dataFetches,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicBullet\"\n  } else {\n    func.displayName = `PlasmicBullet.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicBullet = Object.assign(\n  // Top-level PlasmicBullet renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    svg: makeNodeComponent(\"svg\"),\n\n    // Metadata about props expected for PlasmicBullet\n    internalVariantProps: PlasmicBullet__VariantProps,\n    internalArgProps: PlasmicBullet__ArgProps,\n  }\n)\n\nexport default PlasmicBullet\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicBullet-module--root--2m8c8\";\nexport var svg = \"PlasmicBullet-module--svg--1ZvCg\";","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport {\n  PlasmicBullet,\n  DefaultBulletProps,\n} from \"./plasmic/simple_light_landing_page/PlasmicBullet\"\nimport { HTMLElementRefOf } from \"@plasmicapp/react-web\"\n\n// Your component props start with props for variants and slots you defined\n// in Plasmic, but you can add more here, like event handlers that you can\n// attach to named nodes in your component.\n//\n// If you don't want to expose certain variants or slots as a prop, you can use\n// Omit to hide them:\n//\n// interface BulletProps extends Omit<DefaultBulletProps, \"hideProps1\"|\"hideProp2\"> {\n//   // etc.\n// }\n//\n// You can also stop extending from DefaultBulletProps altogether and have\n// total control over the props for your component.\ninterface BulletProps extends DefaultBulletProps {}\n\nfunction Bullet_(props: BulletProps, ref: HTMLElementRefOf<\"div\">) {\n  // Use PlasmicBullet to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicBullet are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all BulletProps here, but feel free\n  // to do whatever works for you.\n\n  return <PlasmicBullet root={{ ref }} {...props} />\n}\n\nconst Bullet = React.forwardRef(Bullet_)\nexport default Bullet\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: aKgx23trR4pRruD8EJjwJD\n// Component: LaLoN7tQvZHwaP\nimport * as React from \"react\"\n\nimport { Link, GatsbyLinkProps as LinkProps } from \"gatsby\"\n\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  wrapWithClassName,\n  createPlasmicElementProxy,\n  makeFragment,\n  MultiChoiceArg,\n  SingleBooleanChoiceArg,\n  SingleChoiceArg,\n  pick,\n  omit,\n  useTrigger,\n  StrictProps,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\n\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as defaultcss from \"../plasmic__default_style.module.css\" // plasmic-import: global/defaultcss\nimport * as projectcss from \"./plasmic_simple_light_landing_page.module.css\" // plasmic-import: aKgx23trR4pRruD8EJjwJD/projectcss\nimport * as sty from \"./PlasmicBaseCard.module.css\" // plasmic-import: LaLoN7tQvZHwaP/css\n\nexport type PlasmicBaseCard__VariantMembers = {\n  long: \"long\"\n}\n\nexport type PlasmicBaseCard__VariantsArgs = {\n  long?: SingleBooleanChoiceArg<\"long\">\n}\n\ntype VariantPropType = keyof PlasmicBaseCard__VariantsArgs\nexport const PlasmicBaseCard__VariantProps = new Array<VariantPropType>(\"long\")\n\nexport type PlasmicBaseCard__ArgsType = {\n  children?: React.ReactNode\n  iconBack?: React.ReactNode\n}\n\ntype ArgPropType = keyof PlasmicBaseCard__ArgsType\nexport const PlasmicBaseCard__ArgProps = new Array<ArgPropType>(\n  \"children\",\n  \"iconBack\"\n)\n\nexport type PlasmicBaseCard__OverridesType = {\n  root?: p.Flex<\"div\">\n}\n\nexport interface DefaultBaseCardProps {\n  children?: React.ReactNode\n  iconBack?: React.ReactNode\n  long?: SingleBooleanChoiceArg<\"long\">\n  className?: string\n}\n\nfunction PlasmicBaseCard__RenderFunc(props: {\n  variants: PlasmicBaseCard__VariantsArgs\n  args: PlasmicBaseCard__ArgsType\n  overrides: PlasmicBaseCard__OverridesType\n  dataFetches?: PlasmicBaseCard__Fetches\n  forNode?: string\n}) {\n  const { variants, args, overrides, forNode, dataFetches } = props\n\n  return (\n    <p.Stack\n      as={\"div\"}\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      hasGap={true}\n      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {\n        [sty.root__long]: hasVariant(variants, \"long\", \"long\"),\n      })}\n    >\n      <div\n        className={classNames(defaultcss.all, sty.box___6UOb, {\n          [sty.box__long___6UObvFOaC]: hasVariant(variants, \"long\", \"long\"),\n        })}\n      >\n        {p.renderPlasmicSlot({\n          defaultContents:\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n          value: args.children,\n          className: classNames(sty.slotChildren, {\n            [sty.slotChildren__long]: hasVariant(variants, \"long\", \"long\"),\n          }),\n        })}\n      </div>\n\n      {(hasVariant(variants, \"long\", \"long\") ? true : false) ? (\n        <div\n          className={classNames(defaultcss.all, sty.box__duElb, {\n            [sty.box__long__duElbvFOaC]: hasVariant(variants, \"long\", \"long\"),\n          })}\n        >\n          {p.renderPlasmicSlot({\n            defaultContents: (\n              <svg\n                className={classNames(defaultcss.all, sty.svg__a7U08)}\n                role={\"img\"}\n              />\n            ),\n\n            value: args.iconBack,\n          })}\n        </div>\n      ) : null}\n    </p.Stack>\n  ) as React.ReactElement | null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n} as const\ntype NodeNameType = keyof typeof PlasmicDescendants\ntype DescendantsType<\n  T extends NodeNameType\n> = typeof PlasmicDescendants[T][number]\ntype NodeDefaultElementType = {\n  root: \"div\"\n}\n\ntype ReservedPropsType = \"variants\" | \"args\" | \"overrides\"\ntype NodeOverridesType<T extends NodeNameType> = Pick<\n  PlasmicBaseCard__OverridesType,\n  DescendantsType<T>\n>\ntype NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects\n  variants?: PlasmicBaseCard__VariantsArgs\n  args?: PlasmicBaseCard__ArgsType\n  overrides?: NodeOverridesType<T>\n  dataFetches?: PlasmicBaseCard__Fetches\n} & Omit<PlasmicBaseCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props\n  // Specify args directly as props\n  Omit<PlasmicBaseCard__ArgsType, ReservedPropsType> &\n  // Specify overrides for each element directly as props\n  Omit<\n    NodeOverridesType<T>,\n    ReservedPropsType | VariantPropType | ArgPropType\n  > &\n  // Specify props for the root element\n  Omit<\n    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,\n    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>\n  >\n\nfunction makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {\n  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }\n  const func = function <T extends PropsType>(\n    props: T & StrictProps<T, PropsType>\n  ) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicBaseCard__ArgProps,\n      internalVariantPropNames: PlasmicBaseCard__VariantProps,\n    })\n\n    const { dataFetches } = props\n\n    return PlasmicBaseCard__RenderFunc({\n      variants,\n      args,\n      overrides,\n      dataFetches,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicBaseCard\"\n  } else {\n    func.displayName = `PlasmicBaseCard.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicBaseCard = Object.assign(\n  // Top-level PlasmicBaseCard renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n\n    // Metadata about props expected for PlasmicBaseCard\n    internalVariantProps: PlasmicBaseCard__VariantProps,\n    internalArgProps: PlasmicBaseCard__ArgProps,\n  }\n)\n\nexport default PlasmicBaseCard\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicBaseCard-module--root--1zPAV\";\nexport var root__long = \"PlasmicBaseCard-module--root__long--2kAzV\";\nexport var box___6UOb = \"PlasmicBaseCard-module--box___6UOb--1n1Ir\";\nexport var box__long___6UObvFOaC = \"PlasmicBaseCard-module--box__long___6UObvFOaC--3aWXy\";\nexport var slotChildren = \"PlasmicBaseCard-module--slotChildren--1N2CK\";\nexport var slotChildren__long = \"PlasmicBaseCard-module--slotChildren__long--3afQk\";\nexport var box__duElb = \"PlasmicBaseCard-module--box__duElb--2KfcT\";\nexport var box__long__duElbvFOaC = \"PlasmicBaseCard-module--box__long__duElbvFOaC--hpl7s\";\nexport var svg__a7U08 = \"PlasmicBaseCard-module--svg__a7U08--1tR3n\";","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport {\n  PlasmicBaseCard,\n  DefaultBaseCardProps,\n} from \"./plasmic/simple_light_landing_page/PlasmicBaseCard\"\nimport { HTMLElementRefOf } from \"@plasmicapp/react-web\"\n\n// Your component props start with props for variants and slots you defined\n// in Plasmic, but you can add more here, like event handlers that you can\n// attach to named nodes in your component.\n//\n// If you don't want to expose certain variants or slots as a prop, you can use\n// Omit to hide them:\n//\n// interface BaseCardProps extends Omit<DefaultBaseCardProps, \"hideProps1\"|\"hideProp2\"> {\n//   // etc.\n// }\n//\n// You can also stop extending from DefaultBaseCardProps altogether and have\n// total control over the props for your component.\ninterface BaseCardProps extends DefaultBaseCardProps {}\n\nfunction BaseCard_(props: BaseCardProps, ref: HTMLElementRefOf<\"div\">) {\n  // Use PlasmicBaseCard to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicBaseCard are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all BaseCardProps here, but feel free\n  // to do whatever works for you.\n\n  return <PlasmicBaseCard root={{ ref }} {...props} />\n}\n\nconst BaseCard = React.forwardRef(BaseCard_)\nexport default BaseCard\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: aKgx23trR4pRruD8EJjwJD\n// Component: LtiDSvC3hT1kPR\nimport * as React from \"react\"\n\nimport { Link, GatsbyLinkProps as LinkProps } from \"gatsby\"\n\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  wrapWithClassName,\n  createPlasmicElementProxy,\n  makeFragment,\n  MultiChoiceArg,\n  SingleBooleanChoiceArg,\n  SingleChoiceArg,\n  pick,\n  omit,\n  useTrigger,\n  StrictProps,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport BaseCard from \"../../BaseCard\" // plasmic-import: LaLoN7tQvZHwaP/component\nimport Bullet from \"../../Bullet\" // plasmic-import: WBDhfq3Hb4FBSh/component\nimport LinkButton from \"../../LinkButton\" // plasmic-import: _IuMKwtZk40nP/component\n\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as defaultcss from \"../plasmic__default_style.module.css\" // plasmic-import: global/defaultcss\nimport * as projectcss from \"./plasmic_simple_light_landing_page.module.css\" // plasmic-import: aKgx23trR4pRruD8EJjwJD/projectcss\nimport * as sty from \"./PlasmicPlan.module.css\" // plasmic-import: LtiDSvC3hT1kPR/css\n\nexport type PlasmicPlan__VariantMembers = {}\n\nexport type PlasmicPlan__VariantsArgs = {}\ntype VariantPropType = keyof PlasmicPlan__VariantsArgs\nexport const PlasmicPlan__VariantProps = new Array<VariantPropType>()\n\nexport type PlasmicPlan__ArgsType = {\n  price?: React.ReactNode\n  name?: React.ReactNode\n  description?: React.ReactNode\n  children?: React.ReactNode\n}\n\ntype ArgPropType = keyof PlasmicPlan__ArgsType\nexport const PlasmicPlan__ArgProps = new Array<ArgPropType>(\n  \"price\",\n  \"name\",\n  \"description\",\n  \"children\"\n)\n\nexport type PlasmicPlan__OverridesType = {\n  root?: p.Flex<typeof BaseCard>\n}\n\nexport interface DefaultPlanProps {\n  price?: React.ReactNode\n  name?: React.ReactNode\n  description?: React.ReactNode\n  children?: React.ReactNode\n  className?: string\n}\n\nfunction PlasmicPlan__RenderFunc(props: {\n  variants: PlasmicPlan__VariantsArgs\n  args: PlasmicPlan__ArgsType\n  overrides: PlasmicPlan__OverridesType\n  dataFetches?: PlasmicPlan__Fetches\n  forNode?: string\n}) {\n  const { variants, args, overrides, forNode, dataFetches } = props\n\n  return (\n    <BaseCard\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\"__wab_instance\", sty.root)}\n    >\n      <div className={classNames(defaultcss.all, sty.box___8BZu9)}>\n        <p.Stack\n          as={\"div\"}\n          hasGap={true}\n          className={classNames(defaultcss.all, sty.box__cuZ1O)}\n        >\n          {p.renderPlasmicSlot({\n            defaultContents: \"Basic\",\n            value: args.name,\n            className: classNames(sty.slotName),\n          })}\n\n          {p.renderPlasmicSlot({\n            defaultContents: (\n              <div\n                className={classNames(\n                  defaultcss.all,\n                  defaultcss.__wab_text,\n                  sty.box__ddHof\n                )}\n              >\n                {\"$10\"}\n              </div>\n            ),\n\n            value: args.price,\n          })}\n\n          {p.renderPlasmicSlot({\n            defaultContents: (\n              <p.Stack\n                as={\"div\"}\n                hasGap={true}\n                className={classNames(defaultcss.all, sty.box__kVtZl)}\n              >\n                <Bullet\n                  className={classNames(\"__wab_instance\", sty.bullet__xTncw)}\n                />\n\n                <Bullet\n                  className={classNames(\"__wab_instance\", sty.bullet__yrNy0)}\n                />\n\n                <Bullet\n                  className={classNames(\"__wab_instance\", sty.bullet__dN3GD)}\n                />\n              </p.Stack>\n            ),\n\n            value: args.description,\n          })}\n\n          <div className={classNames(defaultcss.all, sty.box__ytja5)}>\n            {p.renderPlasmicSlot({\n              defaultContents: (\n                <LinkButton\n                  text={\"Get started\"}\n                  type={\"outlineBlue\" as const}\n                />\n              ),\n\n              value: args.children,\n            })}\n          </div>\n        </p.Stack>\n      </div>\n    </BaseCard>\n  ) as React.ReactElement | null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n} as const\ntype NodeNameType = keyof typeof PlasmicDescendants\ntype DescendantsType<\n  T extends NodeNameType\n> = typeof PlasmicDescendants[T][number]\ntype NodeDefaultElementType = {\n  root: typeof BaseCard\n}\n\ntype ReservedPropsType = \"variants\" | \"args\" | \"overrides\"\ntype NodeOverridesType<T extends NodeNameType> = Pick<\n  PlasmicPlan__OverridesType,\n  DescendantsType<T>\n>\ntype NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects\n  variants?: PlasmicPlan__VariantsArgs\n  args?: PlasmicPlan__ArgsType\n  overrides?: NodeOverridesType<T>\n  dataFetches?: PlasmicPlan__Fetches\n} & Omit<PlasmicPlan__VariantsArgs, ReservedPropsType> & // Specify variants directly as props\n  // Specify args directly as props\n  Omit<PlasmicPlan__ArgsType, ReservedPropsType> &\n  // Specify overrides for each element directly as props\n  Omit<\n    NodeOverridesType<T>,\n    ReservedPropsType | VariantPropType | ArgPropType\n  > &\n  // Specify props for the root element\n  Omit<\n    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,\n    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>\n  >\n\nfunction makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {\n  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }\n  const func = function <T extends PropsType>(\n    props: T & StrictProps<T, PropsType>\n  ) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicPlan__ArgProps,\n      internalVariantPropNames: PlasmicPlan__VariantProps,\n    })\n\n    const { dataFetches } = props\n\n    return PlasmicPlan__RenderFunc({\n      variants,\n      args,\n      overrides,\n      dataFetches,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicPlan\"\n  } else {\n    func.displayName = `PlasmicPlan.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicPlan = Object.assign(\n  // Top-level PlasmicPlan renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n\n    // Metadata about props expected for PlasmicPlan\n    internalVariantProps: PlasmicPlan__VariantProps,\n    internalArgProps: PlasmicPlan__ArgProps,\n  }\n)\n\nexport default PlasmicPlan\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicPlan-module--root--27EcQ\";\nexport var box___8BZu9 = \"PlasmicPlan-module--box___8BZu9--2wZoE\";\nexport var box__cuZ1O = \"PlasmicPlan-module--box__cuZ1O--2lLcm\";\nexport var slotName = \"PlasmicPlan-module--slotName--1clZ5\";\nexport var box__ddHof = \"PlasmicPlan-module--box__ddHof--2JMe3\";\nexport var box__kVtZl = \"PlasmicPlan-module--box__kVtZl---UwfZ\";\nexport var bullet__xTncw = \"PlasmicPlan-module--bullet__xTncw--34X78\";\nexport var bullet__yrNy0 = \"PlasmicPlan-module--bullet__yrNy0--24Kj_\";\nexport var bullet__dN3GD = \"PlasmicPlan-module--bullet__dN3GD--MBUgR\";\nexport var box__ytja5 = \"PlasmicPlan-module--box__ytja5--2j_Qv\";\nexport var svg___0RIux = \"PlasmicPlan-module--svg___0RIux--1wQXv\";","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport {\n  PlasmicPlan,\n  DefaultPlanProps,\n} from \"./plasmic/simple_light_landing_page/PlasmicPlan\"\n\n// Your component props start with props for variants and slots you defined\n// in Plasmic, but you can add more here, like event handlers that you can\n// attach to named nodes in your component.\n//\n// If you don't want to expose certain variants or slots as a prop, you can use\n// Omit to hide them:\n//\n// interface PlanProps extends Omit<DefaultPlanProps, \"hideProps1\"|\"hideProp2\"> {\n//   // etc.\n// }\n//\n// You can also stop extending from DefaultPlanProps altogether and have\n// total control over the props for your component.\ninterface PlanProps extends DefaultPlanProps {}\n\nfunction Plan(props: PlanProps) {\n  // Use PlasmicPlan to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicPlan are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all PlanProps here, but feel free\n  // to do whatever works for you.\n\n  return <PlasmicPlan {...props} />\n}\n\nexport default Plan\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: aKgx23trR4pRruD8EJjwJD\n// Component: Up-xxBTwbv4TEU\nimport * as React from \"react\"\n\nimport { Link, GatsbyLinkProps as LinkProps } from \"gatsby\"\n\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  wrapWithClassName,\n  createPlasmicElementProxy,\n  makeFragment,\n  MultiChoiceArg,\n  SingleBooleanChoiceArg,\n  SingleChoiceArg,\n  pick,\n  omit,\n  useTrigger,\n  StrictProps,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport BaseCard from \"../../BaseCard\" // plasmic-import: LaLoN7tQvZHwaP/component\n\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as defaultcss from \"../plasmic__default_style.module.css\" // plasmic-import: global/defaultcss\nimport * as projectcss from \"./plasmic_simple_light_landing_page.module.css\" // plasmic-import: aKgx23trR4pRruD8EJjwJD/projectcss\nimport * as sty from \"./PlasmicFaq.module.css\" // plasmic-import: Up-xxBTwbv4TEU/css\n\nexport type PlasmicFaq__VariantMembers = {}\n\nexport type PlasmicFaq__VariantsArgs = {}\ntype VariantPropType = keyof PlasmicFaq__VariantsArgs\nexport const PlasmicFaq__VariantProps = new Array<VariantPropType>()\n\nexport type PlasmicFaq__ArgsType = {\n  children?: React.ReactNode\n  slot?: React.ReactNode\n}\n\ntype ArgPropType = keyof PlasmicFaq__ArgsType\nexport const PlasmicFaq__ArgProps = new Array<ArgPropType>(\"children\", \"slot\")\n\nexport type PlasmicFaq__OverridesType = {\n  root?: p.Flex<typeof BaseCard>\n}\n\nexport interface DefaultFaqProps {\n  children?: React.ReactNode\n  slot?: React.ReactNode\n  className?: string\n}\n\nfunction PlasmicFaq__RenderFunc(props: {\n  variants: PlasmicFaq__VariantsArgs\n  args: PlasmicFaq__ArgsType\n  overrides: PlasmicFaq__OverridesType\n  dataFetches?: PlasmicFaq__Fetches\n  forNode?: string\n}) {\n  const { variants, args, overrides, forNode, dataFetches } = props\n\n  return (\n    <BaseCard\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\"__wab_instance\", sty.root)}\n    >\n      <p.Stack\n        as={\"div\"}\n        hasGap={true}\n        className={classNames(defaultcss.all, sty.box__nmeSx)}\n      >\n        <div className={classNames(defaultcss.all, sty.box__bz7Vt)}>\n          <div className={classNames(defaultcss.all, sty.box__fBpth)}>\n            {p.renderPlasmicSlot({\n              defaultContents: \"Are there long-term contracts?\",\n              value: args.children,\n              className: classNames(sty.slotChildren),\n            })}\n          </div>\n        </div>\n\n        {p.renderPlasmicSlot({\n          defaultContents:\n            \"Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\",\n          value: args.slot,\n          className: classNames(sty.slotSlot),\n        })}\n      </p.Stack>\n    </BaseCard>\n  ) as React.ReactElement | null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n} as const\ntype NodeNameType = keyof typeof PlasmicDescendants\ntype DescendantsType<\n  T extends NodeNameType\n> = typeof PlasmicDescendants[T][number]\ntype NodeDefaultElementType = {\n  root: typeof BaseCard\n}\n\ntype ReservedPropsType = \"variants\" | \"args\" | \"overrides\"\ntype NodeOverridesType<T extends NodeNameType> = Pick<\n  PlasmicFaq__OverridesType,\n  DescendantsType<T>\n>\ntype NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects\n  variants?: PlasmicFaq__VariantsArgs\n  args?: PlasmicFaq__ArgsType\n  overrides?: NodeOverridesType<T>\n  dataFetches?: PlasmicFaq__Fetches\n} & Omit<PlasmicFaq__VariantsArgs, ReservedPropsType> & // Specify variants directly as props\n  // Specify args directly as props\n  Omit<PlasmicFaq__ArgsType, ReservedPropsType> &\n  // Specify overrides for each element directly as props\n  Omit<\n    NodeOverridesType<T>,\n    ReservedPropsType | VariantPropType | ArgPropType\n  > &\n  // Specify props for the root element\n  Omit<\n    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,\n    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>\n  >\n\nfunction makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {\n  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }\n  const func = function <T extends PropsType>(\n    props: T & StrictProps<T, PropsType>\n  ) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicFaq__ArgProps,\n      internalVariantPropNames: PlasmicFaq__VariantProps,\n    })\n\n    const { dataFetches } = props\n\n    return PlasmicFaq__RenderFunc({\n      variants,\n      args,\n      overrides,\n      dataFetches,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicFaq\"\n  } else {\n    func.displayName = `PlasmicFaq.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicFaq = Object.assign(\n  // Top-level PlasmicFaq renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n\n    // Metadata about props expected for PlasmicFaq\n    internalVariantProps: PlasmicFaq__VariantProps,\n    internalArgProps: PlasmicFaq__ArgProps,\n  }\n)\n\nexport default PlasmicFaq\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicFaq-module--root--3wWsb\";\nexport var box__nmeSx = \"PlasmicFaq-module--box__nmeSx--tYAtf\";\nexport var box__bz7Vt = \"PlasmicFaq-module--box__bz7Vt--1G-zj\";\nexport var box__fBpth = \"PlasmicFaq-module--box__fBpth--2Vm5A\";\nexport var slotChildren = \"PlasmicFaq-module--slotChildren--QdhdI\";\nexport var slotSlot = \"PlasmicFaq-module--slotSlot--3jldM\";\nexport var svg__s2FHk = \"PlasmicFaq-module--svg__s2FHk--3Vwgr\";","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport {\n  PlasmicFaq,\n  DefaultFaqProps,\n} from \"./plasmic/simple_light_landing_page/PlasmicFaq\"\n\n// Your component props start with props for variants and slots you defined\n// in Plasmic, but you can add more here, like event handlers that you can\n// attach to named nodes in your component.\n//\n// If you don't want to expose certain variants or slots as a prop, you can use\n// Omit to hide them:\n//\n// interface FaqProps extends Omit<DefaultFaqProps, \"hideProps1\"|\"hideProp2\"> {\n//   // etc.\n// }\n//\n// You can also stop extending from DefaultFaqProps altogether and have\n// total control over the props for your component.\ninterface FaqProps extends DefaultFaqProps {}\n\nfunction Faq(props: FaqProps) {\n  // Use PlasmicFaq to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicFaq are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all FaqProps here, but feel free\n  // to do whatever works for you.\n\n  return <PlasmicFaq {...props} />\n}\n\nexport default Faq\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicPricing-module--root--rcns1\";\nexport var box__lEtPl = \"PlasmicPricing-module--box__lEtPl--3jBdv\";\nexport var header = \"PlasmicPricing-module--header--arUMc\";\nexport var section__thBzq = \"PlasmicPricing-module--section__thBzq--3QfnY\";\nexport var box__mg8V3 = \"PlasmicPricing-module--box__mg8V3--qGwrD\";\nexport var plan__k37CP = \"PlasmicPricing-module--plan__k37CP--10d9F\";\nexport var box__ovD04 = \"PlasmicPricing-module--box__ovD04--3nMm5\";\nexport var box___1JSfw = \"PlasmicPricing-module--box___1JSfw--q8-0N\";\nexport var bullet__uDd62 = \"PlasmicPricing-module--bullet__uDd62--1x0iJ\";\nexport var bullet__vKLry = \"PlasmicPricing-module--bullet__vKLry--rjmNZ\";\nexport var bullet__gzD7S = \"PlasmicPricing-module--bullet__gzD7S--1ZQ07\";\nexport var plan__hsGe = \"PlasmicPricing-module--plan__hsGe--15fbC\";\nexport var box__bGy0G = \"PlasmicPricing-module--box__bGy0G--1dmYh\";\nexport var box__rmob1 = \"PlasmicPricing-module--box__rmob1--3QuOR\";\nexport var bullet__bLBgV = \"PlasmicPricing-module--bullet__bLBgV--2X2yK\";\nexport var bullet__kC3Wy = \"PlasmicPricing-module--bullet__kC3Wy--3OLtQ\";\nexport var bullet__p8UsS = \"PlasmicPricing-module--bullet__p8UsS--24cjJ\";\nexport var bullet__cscSj = \"PlasmicPricing-module--bullet__cscSj--zAoQx\";\nexport var plan__uBazl = \"PlasmicPricing-module--plan__uBazl--3cU8J\";\nexport var box__kmytQ = \"PlasmicPricing-module--box__kmytQ--3fn0o\";\nexport var box___5LBbx = \"PlasmicPricing-module--box___5LBbx--3Mvwm\";\nexport var bullet__gcz47 = \"PlasmicPricing-module--bullet__gcz47--Fy4kW\";\nexport var bullet__xy1ZA = \"PlasmicPricing-module--bullet__xy1ZA--2qW4u\";\nexport var bullet__uKa2B = \"PlasmicPricing-module--bullet__uKa2B--1CCiE\";\nexport var section___75JPl = \"PlasmicPricing-module--section___75JPl--2ZKcO\";\nexport var faq__mzbhf = \"PlasmicPricing-module--faq__mzbhf--41i_N\";\nexport var faq__yId7T = \"PlasmicPricing-module--faq__yId7T--2R0wO\";\nexport var faq__eqGS = \"PlasmicPricing-module--faq__eqGS--1uN33\";\nexport var footer = \"PlasmicPricing-module--footer--k54-O\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: aKgx23trR4pRruD8EJjwJD\n// Component: 2yJEwyzQMLvtTw\nimport * as React from \"react\"\n\nimport { Link, GatsbyLinkProps as LinkProps } from \"gatsby\"\n\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  wrapWithClassName,\n  createPlasmicElementProxy,\n  makeFragment,\n  MultiChoiceArg,\n  SingleBooleanChoiceArg,\n  SingleChoiceArg,\n  pick,\n  omit,\n  useTrigger,\n  StrictProps,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport Header from \"../../Header\" // plasmic-import: _A530sb_4cqLg/component\nimport Section from \"../../Section\" // plasmic-import: QcZGccdaY1-VP/component\nimport Plan from \"../../Plan\" // plasmic-import: LtiDSvC3hT1kPR/component\nimport Bullet from \"../../Bullet\" // plasmic-import: WBDhfq3Hb4FBSh/component\nimport LinkButton from \"../../LinkButton\" // plasmic-import: _IuMKwtZk40nP/component\nimport Faq from \"../../Faq\" // plasmic-import: Up-xxBTwbv4TEU/component\nimport Footer from \"../../Footer\" // plasmic-import: XHaa485UFVs2w/component\n\nimport { useScreenVariants } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: I1cB24cfWiGpRn/globalVariant\n\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as defaultcss from \"../plasmic__default_style.module.css\" // plasmic-import: global/defaultcss\nimport * as projectcss from \"./plasmic_simple_light_landing_page.module.css\" // plasmic-import: aKgx23trR4pRruD8EJjwJD/projectcss\nimport * as sty from \"./PlasmicPricing.module.css\" // plasmic-import: 2yJEwyzQMLvtTw/css\n\nexport type PlasmicPricing__VariantMembers = {}\n\nexport type PlasmicPricing__VariantsArgs = {}\ntype VariantPropType = keyof PlasmicPricing__VariantsArgs\nexport const PlasmicPricing__VariantProps = new Array<VariantPropType>()\n\nexport type PlasmicPricing__ArgsType = {}\ntype ArgPropType = keyof PlasmicPricing__ArgsType\nexport const PlasmicPricing__ArgProps = new Array<ArgPropType>()\n\nexport type PlasmicPricing__OverridesType = {\n  root?: p.Flex<\"div\">\n  header?: p.Flex<typeof Header>\n  footer?: p.Flex<typeof Footer>\n}\n\nexport interface DefaultPricingProps {\n  className?: string\n}\n\nfunction PlasmicPricing__RenderFunc(props: {\n  variants: PlasmicPricing__VariantsArgs\n  args: PlasmicPricing__ArgsType\n  overrides: PlasmicPricing__OverridesType\n  dataFetches?: PlasmicPricing__Fetches\n  forNode?: string\n}) {\n  const { variants, args, overrides, forNode, dataFetches } = props\n\n  const globalVariants = ensureGlobalVariants({\n    screen: useScreenVariants(),\n  })\n\n  return (\n    <React.Fragment>\n      {}\n\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={defaultcss.plasmic_page_wrapper}>\n        <div\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          className={classNames(\n            defaultcss.all,\n            projectcss.root_reset,\n            sty.root\n          )}\n        >\n          <p.Stack\n            as={\"div\"}\n            hasGap={true}\n            className={classNames(defaultcss.all, sty.box__lEtPl)}\n          >\n            <Header\n              data-plasmic-name={\"header\"}\n              data-plasmic-override={overrides.header}\n              className={classNames(\"__wab_instance\", sty.header)}\n            />\n\n            <Section\n              className={classNames(\"__wab_instance\", sty.section__thBzq)}\n              subtitle={\n                <React.Fragment>\n                  <div\n                    className={classNames(\n                      defaultcss.all,\n                      defaultcss.__wab_text,\n                      sty.box___4Lz8W\n                    )}\n                  >\n                    {\n                      \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\"\n                    }\n                  </div>\n\n                  <p.Stack\n                    as={\"div\"}\n                    hasGap={true}\n                    className={classNames(defaultcss.all, sty.box__mg8V3)}\n                  >\n                    <Plan\n                      className={classNames(\"__wab_instance\", sty.plan__k37CP)}\n                      price={\n                        <div\n                          className={classNames(\n                            defaultcss.all,\n                            defaultcss.__wab_text,\n                            sty.box__ovD04\n                          )}\n                        >\n                          {\"$10\"}\n                        </div>\n                      }\n                    >\n                      <LinkButton\n                        text={\"Get started\"}\n                        type={\"outlineBlue\" as const}\n                      />\n                    </Plan>\n\n                    <Plan\n                      className={classNames(\"__wab_instance\", sty.plan__hsGe)}\n                      description={\n                        <p.Stack\n                          as={\"div\"}\n                          hasGap={true}\n                          className={classNames(defaultcss.all, sty.box__rmob1)}\n                        >\n                          <Bullet\n                            className={classNames(\n                              \"__wab_instance\",\n                              sty.bullet__bLBgV\n                            )}\n                          />\n\n                          <Bullet\n                            className={classNames(\n                              \"__wab_instance\",\n                              sty.bullet__kC3Wy\n                            )}\n                          />\n\n                          <Bullet\n                            className={classNames(\n                              \"__wab_instance\",\n                              sty.bullet__p8UsS\n                            )}\n                          />\n\n                          <Bullet\n                            className={classNames(\n                              \"__wab_instance\",\n                              sty.bullet__cscSj\n                            )}\n                          />\n                        </p.Stack>\n                      }\n                      name={\"Team\"}\n                      price={\n                        <div\n                          className={classNames(\n                            defaultcss.all,\n                            defaultcss.__wab_text,\n                            sty.box__bGy0G\n                          )}\n                        >\n                          {\"$49\"}\n                        </div>\n                      }\n                    >\n                      <LinkButton\n                        text={\"Get started\"}\n                        type={\"solidBlue\" as const}\n                      />\n                    </Plan>\n\n                    <Plan\n                      className={classNames(\"__wab_instance\", sty.plan__uBazl)}\n                      name={\"Enterprise\"}\n                      price={\n                        <div\n                          className={classNames(\n                            defaultcss.all,\n                            defaultcss.__wab_text,\n                            sty.box__kmytQ\n                          )}\n                        >\n                          {\"$199\"}\n                        </div>\n                      }\n                    >\n                      <LinkButton\n                        text={\"Contact us\"}\n                        type={\"outlineBlue\" as const}\n                      />\n                    </Plan>\n                  </p.Stack>\n                </React.Fragment>\n              }\n              title={\"Pricing\"}\n            />\n\n            <Section\n              className={classNames(\"__wab_instance\", sty.section___75JPl)}\n              subtitle={\n                <React.Fragment>\n                  <div\n                    className={classNames(\n                      defaultcss.all,\n                      defaultcss.__wab_text,\n                      sty.box__x7E\n                    )}\n                  >\n                    {\n                      \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\"\n                    }\n                  </div>\n\n                  <Faq\n                    className={classNames(\"__wab_instance\", sty.faq__mzbhf)}\n                    slot={\n                      \"Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\"\n                    }\n                  >\n                    {\"Are there long-term contracts?\"}\n                  </Faq>\n\n                  <Faq\n                    className={classNames(\"__wab_instance\", sty.faq__yId7T)}\n                    slot={\n                      \"Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\"\n                    }\n                  >\n                    {\"Can I add or remove licenses?\"}\n                  </Faq>\n\n                  <Faq\n                    className={classNames(\"__wab_instance\", sty.faq__eqGS)}\n                    slot={\n                      \"Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\"\n                    }\n                  >\n                    {\"Do you offer refunds?\"}\n                  </Faq>\n                </React.Fragment>\n              }\n              title={\"FAQ\"}\n            />\n\n            <Footer\n              data-plasmic-name={\"footer\"}\n              data-plasmic-override={overrides.footer}\n              className={classNames(\"__wab_instance\", sty.footer)}\n            />\n          </p.Stack>\n        </div>\n      </div>\n    </React.Fragment>\n  ) as React.ReactElement | null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"header\", \"footer\"],\n  header: [\"header\"],\n  footer: [\"footer\"],\n} as const\ntype NodeNameType = keyof typeof PlasmicDescendants\ntype DescendantsType<\n  T extends NodeNameType\n> = typeof PlasmicDescendants[T][number]\ntype NodeDefaultElementType = {\n  root: \"div\"\n  header: typeof Header\n  footer: typeof Footer\n}\n\ntype ReservedPropsType = \"variants\" | \"args\" | \"overrides\"\ntype NodeOverridesType<T extends NodeNameType> = Pick<\n  PlasmicPricing__OverridesType,\n  DescendantsType<T>\n>\ntype NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects\n  variants?: PlasmicPricing__VariantsArgs\n  args?: PlasmicPricing__ArgsType\n  overrides?: NodeOverridesType<T>\n  dataFetches?: PlasmicPricing__Fetches\n} & Omit<PlasmicPricing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props\n  // Specify args directly as props\n  Omit<PlasmicPricing__ArgsType, ReservedPropsType> &\n  // Specify overrides for each element directly as props\n  Omit<\n    NodeOverridesType<T>,\n    ReservedPropsType | VariantPropType | ArgPropType\n  > &\n  // Specify props for the root element\n  Omit<\n    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,\n    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>\n  >\n\nfunction makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {\n  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }\n  const func = function <T extends PropsType>(\n    props: T & StrictProps<T, PropsType>\n  ) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicPricing__ArgProps,\n      internalVariantPropNames: PlasmicPricing__VariantProps,\n    })\n\n    const { dataFetches } = props\n\n    return PlasmicPricing__RenderFunc({\n      variants,\n      args,\n      overrides,\n      dataFetches,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicPricing\"\n  } else {\n    func.displayName = `PlasmicPricing.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicPricing = Object.assign(\n  // Top-level PlasmicPricing renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    header: makeNodeComponent(\"header\"),\n    footer: makeNodeComponent(\"footer\"),\n\n    // Metadata about props expected for PlasmicPricing\n    internalVariantProps: PlasmicPricing__VariantProps,\n    internalArgProps: PlasmicPricing__ArgProps,\n  }\n)\n\nexport default PlasmicPricing\n/* prettier-ignore-end */\n","// This is a skeleton starter React page generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport { ScreenVariantProvider } from \"../components/plasmic/simple_light_landing_page/PlasmicGlobalVariant__Screen\"\nimport { PlasmicPricing } from \"../components/plasmic/simple_light_landing_page/PlasmicPricing\"\n\nfunction Pricing() {\n  // Use PlasmicPricing to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicPricing are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, PlasmicPricing is wrapped by your project's global\n  // variant context providers. These wrappers may be moved to\n  // Gatsby \"wrapRootElement\" function\n  // (https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr#wrapRootElement).\n  return <PlasmicPricing />\n}\n\nexport default Pricing\n"],"sourceRoot":""}